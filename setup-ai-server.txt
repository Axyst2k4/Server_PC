#!/bin/bash
set -e

# --- PH·∫¶N C·∫§U H√åNH ---
SERVER_DIR=~/ai_server
CLIENT_USER="user"
CLIENT_PASS="12345" 
IMAGE_NAME="ai-sandbox:latest"
CONTAINER_NAME_PREFIX="ai-session"

TS_ACCESS_TOKEN="xxxx"

echo " thi·∫øt l·∫≠p Server AI v·ªõi Tailscale..."

# Ki·ªÉm tra xem jq ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a (c·∫ßn thi·∫øt ƒë·ªÉ x·ª≠ l√Ω API)
if ! command -v jq &> /dev/null
then
    echo "ƒêang c√†i ƒë·∫∑t 'jq' ƒë·ªÉ x·ª≠ l√Ω API..."
    sudo apt-get update && sudo apt-get install -y jq
fi

# B∆∞·ªõc 1: C√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt tr√™n M√ÅY CH·ª¶
# ------------------------------------------------------------------------------
echo "## B∆∞·ªõc 1: C√†i ƒë·∫∑t Docker v√† NVIDIA Container Toolkit tr√™n m√°y ch·ªß..."
sudo apt-get update
sudo apt-get install -y ca-certificates curl wget gnupg lsb-release

if ! command -v docker &> /dev/null; then
    echo "Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t..."
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
else
    echo "Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t."
fi

echo "Ki·ªÉm tra v√† c√†i ƒë·∫∑t NVIDIA Container Toolkit..."
sudo rm -f /etc/apt/sources.list.d/nvidia-*.list
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
sudo dpkg -i cuda-keyring_1.1-1_all.deb
rm cuda-keyring_1.1-1_all.deb
sudo apt-get update
sudo apt-get install -y nvidia-container-toolkit

sudo nvidia-ctk runtime configure --runtime=docker
sudo systemctl restart docker
echo "C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng m√°y ch·ªß ho√†n t·∫•t."

# B∆∞·ªõc 2: T·∫°o m√¥i tr∆∞·ªùng l√†m vi·ªác v√† ƒë·ªãnh nghƒ©a "Sandbox"
# ------------------------------------------------------------------------------
echo "## B∆∞·ªõc 2: T·∫°o th∆∞ m·ª•c v√† ƒë·ªãnh nghƒ©a m√¥i tr∆∞·ªùng Sandbox (Dockerfile)..."
mkdir -p "${SERVER_DIR}/work"
mkdir -p "${SERVER_DIR}/results"
mkdir -p "${SERVER_DIR}/cache"
cd "${SERVER_DIR}"

# T·∫°o Dockerfile
cat > Dockerfile <<EOF
FROM nvidia/cuda:12.5.1-cudnn-runtime-ubuntu22.04
ENV DEBIAN_FRONTEND=noninteractive
ARG USERNAME
ARG PASSWORD

RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-server \
    python3.10 python3-pip \
    git wget sudo curl \
 && rm -rf /var/lib/apt/lists/*

RUN curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null && \
    echo "deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/ubuntu jammy main" | tee /etc/apt/sources.list.d/tailscale.list >/dev/null && \
    apt-get update && apt-get install -y tailscale

RUN pip3 install --no-cache-dir tensorflow==2.16.1

# TƒÉng th·ªùi gian ch·ªù l√™n 600 gi√¢y (10 ph√∫t)
RUN pip3 install --no-cache-dir --timeout 600 \
    torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

RUN useradd -m -s /bin/bash \$USERNAME && \
    echo "\$USERNAME:\$PASSWORD" | chpasswd && \
    adduser \$USERNAME sudo && \
    mkdir /var/run/sshd && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

EXPOSE 22
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
EOF

# T·∫°o entrypoint.sh
cat > entrypoint.sh <<'EOF'
#!/bin/bash
set -e
/usr/sbin/tailscaled &
sleep 3
if [ -n "${TS_AUTHKEY}" ]; then
  tailscale up --ssh --auth-key "${TS_AUTHKEY}" --hostname "${TS_HOSTNAME:-ai-sandbox}" --accept-routes
else
  echo "C·∫¢NH B√ÅO: Bi·∫øn TS_AUTHKEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p."
fi
echo "Starting SSH server..."
/usr/sbin/sshd -D
EOF
chmod +x entrypoint.sh
echo "ƒê·ªãnh nghƒ©a Sandbox ho√†n t·∫•t."

# B∆∞·ªõc 3: Build "Sandbox" Image
# ------------------------------------------------------------------------------
echo "## B∆∞·ªõc 3: Build image Docker cho Sandbox AI..."
sudo docker build \
    --build-arg USERNAME=${CLIENT_USER} \
    --build-arg PASSWORD=${CLIENT_PASS} \
    -t ${IMAGE_NAME} .
echo "Build image th√†nh c√¥ng!"


# B∆∞·ªõc 4: T·∫°o Script Kh·ªüi Ch·∫°y Phi√™n L√†m Vi·ªác
# ------------------------------------------------------------------------------
echo "## B∆∞·ªõc 4: T·∫°o script 'start_session.sh' ƒë·ªÉ t·ª± ƒë·ªông kh·ªüi ƒë·ªông phi√™n l√†m vi·ªác m·ªõi..."

# L∆∞u Access Token v√†o m·ªôt file an to√†n trong th∆∞ m·ª•c server
echo "${TS_ACCESS_TOKEN}" > .ts-access-token
chmod 600 .ts-access-token # Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn ƒë·ªçc/ghi

# T·∫°o script start_session.sh
cat > start_session.sh <<EOF
#!/bin/bash
set -e
echo "üîÑ L·∫•y Auth Key m·ªõi t·ª´ Tailscale API..."
# ƒê·ªçc Access Token t·ª´ file
TS_ACCESS_TOKEN=\$(cat .ts-access-token)

# G·ªçi API c·ªßa Tailscale ƒë·ªÉ t·∫°o m·ªôt Auth Key m·ªõi (d√πng m·ªôt l·∫ßn, h·∫øt h·∫°n sau 5 ph√∫t)
API_RESPONSE=$(curl -s -u "${TS_ACCESS_TOKEN}:" -d '{"capabilities": {"devices": {"create": {"reusable": false, "ephemeral": true, "preauthorized": true, "tags": ["tag:server"]}}}, "expirySeconds": 300}' 'https://api.tailscale.com/api/v2/tailnet/-/keys')
# D√πng jq ƒë·ªÉ l·∫•y key t·ª´ response JSON
TS_AUTH_KEY=\$(echo "\$API_RESPONSE" | jq -r .key)

if [ "\$TS_AUTH_KEY" = "null" ] || [ -z "\$TS_AUTH_KEY" ]; then
    echo "‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫°o Auth Key t·ª´ Tailscale API. Vui l√≤ng ki·ªÉm tra Access Token."
    echo "API Response: \$API_RESPONSE"
    exit 1
fi

echo "‚úÖ ƒê√£ c√≥ Auth Key m·ªõi."

# ƒê·∫∑t t√™n cho m√°y ·∫£o tr√™n m·∫°ng Tailscale
TS_HOSTNAME="${CONTAINER_NAME_PREFIX}-\$(date +%s)"

echo "üöÄ Starting new AI session named '\${TS_HOSTNAME}' on Tailscale..."

sudo docker run \\
    --rm \\
    -d \\
    --gpus all \\
    --name \${TS_HOSTNAME} \\
    --cap-add=NET_ADMIN \\
    --device=/dev/net/tun:/dev/net/tun \\
    -e TS_AUTHKEY=\${TS_AUTH_KEY} \\
    -e TS_HOSTNAME=\${TS_HOSTNAME} \\
    -v "${SERVER_DIR}/work:/home/${CLIENT_USER}/work" \\
    -v "${SERVER_DIR}/results:/home/${CLIENT_USER}/results" \\
    -v "${SERVER_DIR}/cache:/home/${CLIENT_USER}/.cache" \\
    ${IMAGE_NAME}

echo "‚úÖ Session is starting!"
echo "--------------------------------------------------"
echo "Sau v√†i gi√¢y, b·∫°n c√≥ th·ªÉ xem IP c·ªßa container b·∫±ng l·ªánh: tailscale status"
echo "Client k·∫øt n·ªëi qua Bitvise SSH Client v·ªõi:"
echo "  Host: <IP_TAILSCALE_C·ª¶A_CONTAINER>"
echo "  Port: 22"
echo "  Username: ${CLIENT_USER}"
echo "  Password: ${CLIENT_PASS}"
echo "--------------------------------------------------"
EOF
chmod +x start_session.sh

# --- HO√ÄN T·∫§T ---
echo -e " C√ÄI ƒê·∫∂T SERVER HO√ÄN T·∫§T!"
